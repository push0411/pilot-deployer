Demo Data 
___________________________________________________

---------------------------------------------------
Create Project - 
---------------------------------------------------

{
    "ID": "PRJ3011",
    "type": "Mega",
    "title": "Flex Glove",
    "description": "Smart Wearable Glove",
    "teamID": "TEM768",
    "guideID": "1",
    "components": [
        {
            "id": "COM1",
            "name": "Rasberi-Pie",
            "purpose": "Node MCU",
            "quantity": 1
        },
        {
            "id": "COM7856",
            "name": "Resistor ",
            "purpose": "Circuit Component",
            "quantity": 1
        },
        {
            "id": "COM3",
            "name": "Flex Sensor",
            "purpose": "Gesture Recognizer",
            "quantity": 10
        }
    ]
}


{
    "ID": "PRJ8423",
    "type": "Mini",
    "title": "Traffic Light Detector",
    "description": "It detects the red signal jump by vehicle & penalizes the owner for the same by logging data to traffic control managements !",
    "teamID": "TEM1152",
    "guideID": "2541",
    "components": [
        {
            "id": "COM1",
            "name": "Rasberi-Pie",
            "purpose": "Node MCU & ML Handler",
            "quantity": 2
        },
        {
            "id": "COM1234",
            "name": "Ardiono UNO R3",
            "purpose": "The Cars controller",
            "quantity": 1
        },
        {
            "id": "COM5543",
            "name": "GSM-Module",
            "purpose": "Wireless Communication Device",
            "quantity": 2
        }
    ]
}

---------------------------------------------------
Create Component -
---------------------------------------------------



---------------------------------------------------
Generate PDF Function
---------------------------------------------------

const generatePDF = async () => {
  const invoiceItems = midOrders.filter((item) => item.toOrder > 0);

  try {
    const token = localStorage.getItem('token');

    // Fetch sender info
    const meRes = await axios.get(`${BASE_URL}/me`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    const senderName = meRes?.data?.data?.name || 'Department Representative';

    const doc = new jsPDF();
    const img = new Image();
    img.src = logo;

    img.onload = async () => {
      // === LETTERHEAD ===
      doc.addImage(img, 'PNG', 14, 10, 28, 28);
      doc.setFont('Times', 'Bold');
      doc.setFontSize(14);
      doc.text('Department of Electronics Engineering', 45, 16);

      doc.setFont('Times', 'Normal');
      doc.setFontSize(12);
      doc.text('Walchand College of Engineering, Sangli', 45, 23);
      doc.text('416416, Maharashtra, India', 45, 30);

      doc.setFontSize(11);
      doc.text(`Date: ${new Date().toLocaleDateString()}`, 160, 30, { align: 'right' });

      doc.setDrawColor(100);
      doc.setLineWidth(0.3);
      doc.line(14, 38, 196, 38);

      // === LETTER BODY ===
      let y = 48;
      doc.setFont('Times', 'Normal');
      doc.text('To,', 14, y);
      doc.text('The Supplier,', 14, (y += 7));

      doc.setFont('Times', 'Bold');
      doc.text('Subject:', 14, (y += 12));
      doc.setFont('Times', 'Normal');
      doc.text('Request for the supply of listed electronic components.', 32, y);

      doc.text('Respected Sir/Madam,', 14, (y += 12));
      doc.text(
        'We kindly request you to supply the following electronic components listed below as they are',
        14,
        (y += 10),
        { maxWidth: 180 }
      );
      doc.text(
        'essential for the ongoing academic and project activities in our department.',
        14,
        (y += 6),
        { maxWidth: 180 }
      );

      // === TABLE ===
      const invoiceData = invoiceItems.map((item, index) => [
        index + 1,
        item.ID,
        item.name,
        item.toOrder,
      ]);

      autoTable(doc, {
        startY: y + 10,
        head: [['#', 'ID', 'Name', 'Required Quantity']],
        body: invoiceData,
        theme: 'grid',
        styles: { fontSize: 11 },
        headStyles: { fillColor: [50, 50, 50], textColor: 255 },
      });

      const afterTableY = doc.lastAutoTable.finalY + 10;

      // === CONCLUSION ===
      doc.text(
        'We assure you that the components will be utilized solely for academic and research purposes.',
        14,
        afterTableY
      );
      doc.text(
        'We would appreciate your prompt response and cooperation in this matter.',
        14,
        afterTableY + 8
      );

      doc.text('Thank you.', 14, afterTableY + 18);
      doc.text('Sincerely,', 14, afterTableY + 26);

      doc.setFont('Times', 'Bold');
      doc.text(`${senderName}`, 14, afterTableY + 33);
      doc.setFont('Times', 'Normal');
      doc.text('Department of Electronics Engineering', 14, afterTableY + 40);
      doc.text('WCE, Sangli', 14, afterTableY + 47);

      // === SIGNATURE BLOCK ===
      const signatureY = afterTableY + 70;
      doc.setLineWidth(0.2);
      doc.line(30, signatureY, 80, signatureY); // HOD
      doc.line(130, signatureY, 180, signatureY); // Director

      doc.setFontSize(11);
      doc.text('Head of Department', 30, signatureY + 6);
      doc.text('Dept. of Electronics Engg.', 30, signatureY + 12);

      doc.text('Director', 130, signatureY + 6);
      doc.text('Walchand College of Engineering', 130, signatureY + 12);
      doc.text('Sangli', 130, signatureY + 18);

      // === ENCODE & SUBMIT ===
      const pdfBase64 = doc.output('datauristring').split(',')[1];
      const res = await axios.post(
        `${BASE_URL}/create-order`,
        {
          orderDetails: invoiceItems.map((item) => ({
            ID: item.ID,
            name: item.name,
            quantity: item.toOrder,
          })),
          invoicePDF: pdfBase64,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (res.data.success) {
        doc.save('order-invoice.pdf');
        navigate('/manager-dashboard');
      } else {
        alert('Failed to create order. Try again.');
      }
    };
  } catch (err) {
    console.error('Error while creating order:', err);
    alert('Error occurred while saving order.');
  }
};

